# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
    - '**.md'
    - 'demo/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Runs a set of commands using the runners shell

      - name: 'Get Date'
        run: echo "date=$(TZ=':Asia/Shanghai' date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Build
        run: |
          chmod 755 ./.github/build.sh
          ./.github/build.sh
          echo "version=$(TZ=':Asia/Shanghai' date '+%Y.%m.%d')" >> ./module.prop

      - name: Zip Folder
        run: |
          chmod 755 ./.github/pack.sh
          ./.github/pack.sh

     ## 上传附件

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: MIUI_Icons-${{env.date}}
          path: ./MIUI_Icons-${{env.date}}.zip
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lrone
          path: ./themes/lrone.tar.xz

# This is a basic workflow to help you get started with Actions
      - name: Post to channel
        if: ${{ !startsWith(github.event.head_commit.message, '[skip post]') }}
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          FILE: ./MIUI_Icons-${{env.date}}.zip
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$FILE"
          